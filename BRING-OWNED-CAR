local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- ‚úÖ Load Iris Notification System
local Notification = loadstring(game:HttpGet("https://api.irisapp.ca/Scripts/IrisBetterNotifications.lua"))()

-- Function to get character and HumanoidRootPart
local function getCharacterAndRootPart()
	local character = player.Character or player.CharacterAdded:Wait()
	local rootPart = character:WaitForChild("HumanoidRootPart")
	return character, rootPart
end

-- Function to bring the player's OWN car to them and seat them
local function bringOwnedCarToPlayer()
	local character, rootPart = getCharacterAndRootPart()
	local civCars = workspace:FindFirstChild("CivCars")
	if not civCars then
		warn("CivCars folder not found!")
		return
	end

	local ownedCar = nil
	local playerPosition = rootPart.Position

	-- Find your own car based on "Owner" tag
	for _, car in ipairs(civCars:GetChildren()) do
		if car:IsA("Model") and car:FindFirstChild("DriveSeat") then
			local owner = car:FindFirstChild("Owner")
			if owner and owner:IsA("StringValue") and owner.Value == player.Name then
				ownedCar = car
				break
			end
		end
	end

	if not ownedCar then
		Notification.Notify("From snipet.cc", "‚ùå Could not find your car!", "", {
			Duration = 3,
			Main = {
				Rounding = true,
			}
		})
		return
	end

	-- Make sure the car has a PrimaryPart
	if not ownedCar.PrimaryPart then
		ownedCar.PrimaryPart = ownedCar:FindFirstChild("PrimaryPart") or ownedCar:FindFirstChildWhichIsA("BasePart")
		if not ownedCar.PrimaryPart then
			warn("Car has no PrimaryPart!")
			return
		end
	end

	-- Raycast to ground
	local rayOrigin = rootPart.Position + Vector3.new(0, 5, 0)
	local rayDirection = Vector3.new(0, -50, 0)
	local raycastParams = RaycastParams.new()
	raycastParams.FilterDescendantsInstances = {character, ownedCar}
	raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

	local rayResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
	local groundY = rootPart.Position.Y
	if rayResult then
		groundY = rayResult.Position.Y
	end

	-- Position the car near the player
	local carSize = ownedCar:GetExtentsSize()
	local forward = rootPart.CFrame.LookVector
	local targetPos = rootPart.Position + forward * (carSize.Z / 2 + 3)
	targetPos = Vector3.new(targetPos.X, groundY + carSize.Y / 2 + 0.1, targetPos.Z)
	local targetCFrame = CFrame.new(targetPos, targetPos + forward)

	-- Move the car to the target position
	ownedCar:PivotTo(targetCFrame)

	-- Anchor parts briefly to hold position
	for _, part in ipairs(ownedCar:GetDescendants()) do
		if part:IsA("BasePart") then
			part.Anchored = true
		end
	end

	task.wait(0.2)

	for _, part in ipairs(ownedCar:GetDescendants()) do
		if part:IsA("BasePart") then
			part.Anchored = false
		end
	end

	-- Update any server-tracked position value
	local posValue = ownedCar:FindFirstChild("Position") or ownedCar:FindFirstChild("LastLocation") or ownedCar:FindFirstChild("SpawnPoint")
	if posValue and posValue:IsA("Vector3Value") then
		posValue.Value = targetPos
	end

	-- ‚úÖ Sit the player in the car
	task.wait(0.1)
	local driveSeat = ownedCar:FindFirstChild("DriveSeat")
	local humanoid = character:FindFirstChildOfClass("Humanoid")
	if driveSeat and humanoid then
		driveSeat:Sit(humanoid)
	end

	-- ‚úÖ Final notification using Iris
	Notification.Notify("From snipet.cc", "‚úÖ Your owned car has been brought and you are seated!", "", {
		Duration = 3,
		Main = {
			Rounding = true,
		}
	})
end

-- Update character on respawn
player.CharacterAdded:Connect(function()
	getCharacterAndRootPart()
end)

-- üöó Auto-run
bringOwnedCarToPlayer()
